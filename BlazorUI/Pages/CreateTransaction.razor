@page "/transaction/create"
@using DataAccessLibrary.Models
@using DataAccessLibrary.Services
@using DataAccessLibrary.DataModels
@inject FinancialService FinancialService

<h1>Create Transactions</h1>

<p>Transaction will be posted to: <a target="_blank" href="https://financialwebapi.azurewebsites.net/">https://financialwebapi.azurewebsites.net/</a></p>

@if (!_formLoaded)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="col-4">
        <h5 class="header-small">Type</h5>
        @foreach (var type in (TransactionType[]) Enum.GetValues(typeof(TransactionType)))
        {
            <button class="@(_viewModel.SelectedType == type ? "btn btn-warning" : "btn btn-light")" 
                    style="margin: .2em"
                    @onclick="() => SelectType(type)">@type</button>
        }

        <h5 class="header-small">Amount</h5>
        <input class="form-control" type="number" @bind="_viewModel.Amount"/>

        <h5 class="header-small">Memo</h5>
        <input class="form-control" @bind="_viewModel.Memo"/>

        <h5 class="header-small">Bank</h5>
        @foreach (var account in _viewModel.BankAccounts)
        {
            <button class="@(_viewModel.SelectedBankAccount == account ? "btn btn-warning" : "btn btn-light")" 
                    style="margin: .2em"
                    @onclick="() => SelectBank(account)">@account.Name</button>
        }

        <h5 class="header-small">Budget</h5>
        @foreach (var budget in _viewModel.Budgets)
        {
           <button class="@(_viewModel.SelectedBudget == budget ? "btn btn-warning" : "btn btn-light")" 
                   style="margin: .2em"
                   @onclick="() => SelectBudget(budget)">@budget.Name</button>
        }
        
        @if (_loadingBudgetItems)
        {
            <h5 class="header-small"><em>Loading...</em></h5>
        }
        else if(_viewModel.BudgetItems != null)
        {
            <h5 class="header-small">Budget Items</h5>
        }
        
        @if (_viewModel.BudgetItems != null)
        {
            foreach (var item in _viewModel.BudgetItems)
            {
                <button class="@(_viewModel.SelectedBudgetItem == item ? "btn btn-warning" : "btn btn-light")" 
                        style="margin: .2em"
                        @onclick="() => SelectBudgetItem(item)">@item.Name</button>
            }
        }
        <br/>
        <button class="btn btn-success" 
                style="padding: .5em; margin: .2em"
                @onclick="SubmitTransaction">@(_submittingTransaction ? "Submitting..." : "Submit Transaction")</button>
        
    </div>

}

@code {
    private bool _formLoaded;
    private bool _loadingBudgetItems;
    private bool _submittingTransaction;

    private CreateTransactionViewModel _viewModel = new CreateTransactionViewModel();

    protected override async Task OnInitializedAsync()
    {
        await _viewModel.Build(FinancialService);
        _formLoaded = true;
    }

    private void SelectType(TransactionType type)
    {
        _viewModel.SelectedType = type;
    }

    private void SelectBank(BankAccount bank)
    {
        _viewModel.SelectedBankAccount = bank;
    }

    private async Task SelectBudget(Budget budget)
    {
        _loadingBudgetItems = true;
        _viewModel.BudgetItems = null;
        _viewModel.SelectedBudgetItem = null;
        _viewModel.SelectedBudget = budget;
        _viewModel.BudgetItems = (List<BudgetItem>) await FinancialService.GetBudgetItemsByBudgetId(budget.Id);
        _loadingBudgetItems = false;
    }

    private void SelectBudgetItem(BudgetItem item)
    {
        _viewModel.SelectedBudgetItem = item;
    }

    private async Task SubmitTransaction()
    {
        _submittingTransaction = true;
        var response = await _viewModel.CreateTransaction();
        _submittingTransaction = false;
    }

}